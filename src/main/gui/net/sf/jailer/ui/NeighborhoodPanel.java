/*
 * Copyright 2007 - 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.jailer.ui;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.JLabel;
import javax.swing.JPanel;

import net.sf.jailer.datamodel.Association;
import net.sf.jailer.datamodel.DataModel;
import net.sf.jailer.datamodel.Table;
import net.sf.jailer.ui.graphical_view.GraphicalDataModelView;

/**
 * Neighborhood Panel.
 *
 * @author Ralf Wisser
 */
public class NeighborhoodPanel extends javax.swing.JPanel {

    private static final Color WHITE = new Color(255, 255, 255, 200);
    private final Font italicFont;
    
	/**
     * Creates new form NeighborhoodPanel
     * @param table 
	 * @param graphView 
	 * @param ignoredColor 
	 * @param assocWithColor 
	 * @param hasDepColor 
	 * @param depOnColor 
     */
    public NeighborhoodPanel(DataModel dataModel, Table table, GraphicalDataModelView graphView, boolean hideIgnored, Color depOnColor, Color hasDepColor, Color assocWithColor, Color ignoredColor) {
        initComponents();
        
        tableLabel.setText(dataModel.getDisplayName(table));
        titlePanel.setBackground(WHITE);
        
        Font font = new JLabel("normal").getFont();
        Font boldFont = new Font(font.getName(), font.getStyle() | Font.BOLD, font.getSize());
        italicFont = new Font(font.getName(), font.getStyle() | Font.ITALIC, font.getSize());
		tableLabel.setFont(boldFont);
		
		try {
			createTableLinks(dataModel, table, graphView, hideIgnored, depOnColor, hasDepColor, assocWithColor, ignoredColor);
		} catch (Exception e) {
			e.printStackTrace();
		}
    }

    private void createTableLinks(final DataModel dataModel, Table table, GraphicalDataModelView graphView, boolean hideIgnored, Color depOnColor, Color hasDepColor, Color assocWithColor, Color ignoredColor) {
    	Set<Table> destinations = new HashSet<Table>();
    	Map<Table, Color> tabColor = new HashMap<Table, Color>();
    	
    	for (Association a: table.associations) {
    		if (!a.destination.equals(table)) {
    			if (!a.isIgnored() || !hideIgnored) {
    				destinations.add(a.destination);
    				Color c;
    				if (a.isIgnored()) {
    					c = ignoredColor;
    				} else if (a.isInsertDestinationBeforeSource()) {
    					c = depOnColor;
    				} else if (a.isInsertSourceBeforeDestination()) {
    					c = hasDepColor;
    				} else {
    					c = assocWithColor;
    				}
    				tabColor.put(a.destination, c);
    			}
    		}
    	}
    	if (destinations.isEmpty()) {
    		setVisible(false);
    	} else {
    		List<Table> sorted = new ArrayList<Table>(destinations);
    		Collections.sort(sorted, new Comparator<Table>() {
				@Override
				public int compare(Table o1, Table o2) {
					return dataModel.getDisplayName(o1).compareTo(dataModel.getDisplayName(o2));
				}
			});
    		int y = 0;
    		for (Table t: sorted) {
    			JLabel jLabel = new JLabel("  " + dataModel.getDisplayName(t));
    			JPanel jPanel = new JPanel();
    			jPanel.setLayout(new FlowLayout(0, 0, 0));
    			jPanel.add(jLabel);
    			jPanel.setBackground(WHITE);
    			jLabel.setForeground(tabColor.get(t));
    			if (graphView.isTableVisible(t)) {
    				jLabel.setFont(italicFont);
    				jLabel.setForeground(new Color(jLabel.getForeground().getRed(), jLabel.getForeground().getGreen(), jLabel.getForeground().getBlue(), 150));
    			}
    	        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
    	        gridBagConstraints.gridx = 1;
    	        gridBagConstraints.gridy = y++;
    	        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    	        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
    	        jPanel1.add(jPanel, gridBagConstraints);
    		}
    	}
	}

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        titlePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tableLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        titlePanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Neighborhood of");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        titlePanel.add(jLabel1, gridBagConstraints);

        tableLabel.setText("TABLE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        titlePanel.add(tableLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        titlePanel.add(jSeparator1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(titlePanel, gridBagConstraints);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 8);
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}
